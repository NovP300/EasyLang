import { useEffect, useState, Link } from "react";
import { useParams, useNavigate, useLocation } from "react-router-dom";
import { getExercisesByLesson } from "../api/exercises";
import ExerciseRenderer from "../components/Exercise/ExerciseRender";
import { markLessonCompleted } from "../api/progress";
import { getLessonBySlug } from "../api/lessons";
import styles from "./Style (css)/ExercisePage.module.css";



const GamePage = () => {
  const { slug } = useParams();
  const location = useLocation();
  const navigate = useNavigate();
  const isAuthenticated = !!localStorage.getItem("access_token");

  const isTest = location.state?.isTest || false;
  const testLevel = location.state?.difficulty || null;
  const passedLanguageId = location.state?.languageId || null;

  const [queue, setQueue] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [completed, setCompleted] = useState(false);
  const [lessonId, setLessonId] = useState(null);
  const [lessonMeta, setLessonMeta] = useState(null);
  const [errors, setErrors] = useState(0);
  const maxErrorsAllowed = 2;

  const [languageId, setLanguageId] = useState(null); // –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —É—Ä–æ–∫–∞

  useEffect(() => {
    console.log("‚úÖ ExercisePage –æ—Ç–∫—Ä—ã—Ç");
    console.log(location);  // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  }, []);


  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getExercisesByLesson(slug);
        setQueue(data);

        const lesson = await getLessonBySlug(slug);
        setLessonId(lesson.id);
        setLessonMeta(lesson);
        if (!isTest) {
          setLanguageId(lesson.module.language.id);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π", err);
      }
    };


    fetchData();
  }, [slug, isTest]);

  useEffect(() => {
    if (!isTest && completed && lessonId) {
      markLessonCompleted(lessonId)
        .then(() => console.log("–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π"))
        .catch((err) =>
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ", err)
        );
    }
  }, [completed, lessonId, isTest, navigate, languageId]);


  useEffect(() => {
    console.log("=== –û–¢–õ–ê–î–ö–ê: location.state –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===");
    console.log("location.state:", location.state);
    console.log("isTest:", isTest);
    console.log("testLevel:", testLevel);
    console.log("passedLanguageId:", passedLanguageId);
    console.log("languageId (–æ–±—ã—á–Ω—ã–π —É—Ä–æ–∫):", languageId);
    console.log("isAuthenticated:", isAuthenticated);
    console.log("lessonId:", lessonId);
    console.log("completed:", completed);
    console.log("errors:", errors);
  }, [
    location.state,
    isTest,
    testLevel,
    passedLanguageId,
    languageId,
    isAuthenticated,
    lessonId,
    completed,
    errors,
  ]);




  const handleAnswer = (isCorrect) => {
    const current = queue[currentIndex];

    if (!isCorrect && isTest) {
      const newErrors = errors + 1;
      setErrors(newErrors);
      if (newErrors > maxErrorsAllowed) {
        setCompleted(true);
        return;
      }
    }

    if (!isCorrect && !isTest) {
      setQueue((prevQueue) => [...prevQueue, current]);
    }

    if (currentIndex + 1 >= queue.length) {
      setCompleted(true);

      
    } else {
      setCurrentIndex(currentIndex + 1);
    }
  };

  if (queue.length === 0) return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...</p>;

  if (completed) {
    if (isTest) {
      if (errors > maxErrorsAllowed) {
        return (
          <div className={styles.successWrapper}>
            <h2 className={styles.successTitle}>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üòî</h2>

            <div className={styles.successCard}>
              <p className={styles.successText}>
                –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.
              </p>
            </div>

            <div className={styles.successActions}>
              <button
                className={styles.successButton}
                onClick={() => navigate(`/progress?languageId=${passedLanguageId}`)}
              >
                –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å
              </button>

              <button
                className={styles.successButton}
                onClick={() =>
                  navigate("/test", { state: { step: 3, languageId: passedLanguageId, }, })}
              >
                –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
              </button>
            </div>
          </div>
        );
      } else if (!isAuthenticated) {

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
        localStorage.setItem('pendingTestResults', JSON.stringify({
          languageId: passedLanguageId,
          testLevel: testLevel, // –∏–ª–∏ moduleOrder, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –ª–æ–≥–∏–∫–∏
          isAfterTest: true,
          expires: Date.now() + 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
        }));

        return (
          <div className={styles.successWrapper}>
            <h2 className={styles.successTitle}>–¢—ã –º–æ–ª–æ–¥–µ—Ü!</h2>
            <div className={styles.successCard}>
              <p className={styles.successText}>
                –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!<br />
                –°–æ–≤–µ—Ç—É–µ–º –Ω–∞—á–∞—Ç—å —Å –º–æ–¥—É–ª—è {testLevel}! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã  –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é.
              </p>
            </div>
            <div className={styles.successActions}>
              <button
                onClick={() => navigate("/register", { state: { background: location } })}
                className={styles.successButton}
              >
                –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
              </button>
              <button
                onClick={() => navigate("/")}
                className={`${styles.successButton} ${styles.laterButton}`}
              >
                –ü–æ–∑–∂–µ
              </button>
            </div>
          </div>
        );
      } else {
        return (
          <div className={styles.successWrapper}>
            <h2 className={styles.successTitle}>–¢—ã –º–æ–ª–æ–¥–µ—Ü!</h2>
            <div className={styles.successCard}>
              <p className={styles.successText}>
                  –ù–∞—á–Ω—ë–º —Å –º–æ–¥—É–ª—è {testLevel}! –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç. –ï—Å–ª–∏ —á—Ç–æ, –í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–∑–∂–µ.
              </p>
            </div>
            <button
              onClick={() => navigate(`/progress?languageId=${passedLanguageId}`)}
              className={styles.successButton}
            >
              –•–æ—Ä–æ—à–æ
            </button>
          </div>
        );
      }
    }
    else {
      // –æ–±—ã—á–Ω—ã–π —É—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω
      return (
        <div className={styles.successWrapper}>
          <h2 className={styles.successTitle}>–£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω!</h2>
          <div className={styles.successCard}>
            <p className={styles.successText}>
              –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç–æ—Ç —É—Ä–æ–∫.
            </p>
          </div>
          <div className={styles.successActions}>
            <button
              className={styles.successButton}
              onClick={() => navigate(`/progress?languageId=${languageId}`)}
            >
              –ö –ø—Ä–æ–≥—Ä–µ—Å—Å—É
            </button>
            <button
              className={`${styles.successButton} ${styles.laterButton}`}
              onClick={() => navigate("/")}
            >
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </div>
        </div>
      );
    }
  }

  const currentExercise = queue[currentIndex];



  return (
    <div className="p-4 max-w-xl mx-auto">
      <ExerciseRenderer exercise={currentExercise} onAnswer={handleAnswer} />
    </div>
  );
};

export default GamePage;
